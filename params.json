{"name":"Arduino-signal-filtering-library","tagline":"Arduino library for signal filtering","body":"### Overview\r\nThis project is a free initiative to create an Arduino library for signal filtering.\r\n\r\n * [Some information about the filters](https://github.com/jeroendoggen/Arduino-signal-filtering-library/wiki/Signal-Filtering-Basics)\r\n * Free ebook: \"The Scientist and Engineer's Guide to Digital Signal Processing\" http://www.dspguide.com/\r\n\r\n### Available filters:\r\n * low pass filter (1st and 2nd order, Chebychev and Bessel)\r\n * median filter\r\n\r\n### Library Usage\r\n * Download the source\r\n * Place the Filter folder in your Arduino1.0+ \"libraries\" folder\r\n * Open example sketch: \"file\", \"Examples\", \"!SignalFilter\", \"Bessel\" (or any other example)\r\n * Connect a (noisy) analog sensor to port A0\r\n * Compile & upload code\r\n * Original and filtered sensor data should be arriving over the serial port\r\n\r\n### Changing filters:\r\nThis library is partially based on filters that are auto-generated on the [filtuino website](http://www.schwietering.com/jayduino/filtuino/).\r\nFiltuino is a Filter Suite that generates source code for different digital filters (IIR Lowpass, Highpass, Bandpass, Bandstop, IIR Resonanz Filter, Proportional Integral Filter).\r\n\r\nIf you want your own filter properties, I suggest you:\r\n * Use my library as a template (to have some working code to start with)\r\n * Generate the exact filtering code you need on the filtuino website (filter type, ripple, frequencies,...)\r\n * Replace one of the filters in my library with your own custom filter.\r\n\r\n### Version History:\r\n * Version 0.1: Low pass Chebychev and Bessel filters\r\n * Version 0.2: Median filter\r\n\r\n### Roadmap:\r\n * Version 0.3+: More filters (band pass, running average, Kalman, ...)                                             \r\n","google":"UA-28370634-2","note":"Don't delete this file! It's used internally to help with page regeneration."}